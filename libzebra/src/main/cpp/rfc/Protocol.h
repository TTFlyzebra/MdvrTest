//
// Created by FlyZebra on 2021/9/29 0029.
//
#ifndef F_ZEBRA_PROTOCOL_H
#define F_ZEBRA_PROTOCOL_H

#include <stdint.h>

//u-->u
//debug log start
//2byte header EEAA
//2byte 0001
//4byte data length
//8byte TID
//2byte width
//2byte height
//2byte format
static const uint8_t DEBUG_OPEN[24] = {
    0xEE,0xAA,0x00,0x01,0x00,0x00,0x00,0x08,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static const int16_t TYPE_DEBUG_OPEN = 0x0100;

//u-->u
//debug log stop
//2byte header EEAA
//2byte 0002
//4byte data length
//8byte TID
static const uint8_t DEBUG_CLOSE[16] = {
    0xEE,0xAA,0x00,0x02,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static const int16_t TYPE_DEBUG_CLOSE = 0x0200;

//t-->u
//terminal connect heartbeat check
//2byte header EEAA
//2byte 0101
//4byte data length
//8byte TID
//1byte CPU temperature
//1byte GPU temperature
//1byte screen status
static const uint8_t T_HEARTBEAT[32] = {
    0xEE,0xAA,0x01,0x01,0x00,0x00,0x00,0x18,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static const int16_t TYPE_T_HEARTBEAT = 0x0101;

//u-->t
//remote connect heartbeat check
//2byte header EEAA
//2byte 0102
//4byte data length
//8byte TID
//8byte UID
static const uint8_t U_HEARTBEAT[32] = {
    0xEE,0xAA,0x01,0x02,0x00,0x00,0x00,0x18,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static const int16_t TYPE_U_HEARTBEAT = 0x0201;

//u-->u t-->t
//termanal is connect
//2byte header EEAA
//2byte 0103
//4byte data length
//8byte TID
static const uint8_t T_CONNECTED[16] = {
    0xEE,0xAA,0x01,0x03,0x00,0x00,0x00,0x08,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static const int16_t TYPE_T_CONNECTED = 0x0301;

//u-->u t-->t
//termanal is disconnect
//2byte header EEAA
//2byte 0104
//4byte data length
//8byte TID
static const uint8_t T_DISCONNECTED[16] = {
    0xEE,0xAA,0x01,0x04,0x00,0x00,0x00,0x08,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static const int16_t TYPE_T_DISCONNECTED = 0x0401;

//u-->u t-->t
//remote is connect
//2byte header EEAA
//2byte 0105
//4byte data length
//8byte UID
static const uint8_t U_CONNECTED[16] = {
    0xEE,0xAA,0x01,0x05,0x00,0x00,0x00,0x08,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static const int16_t TYPE_U_CONNECTED = 0x0501;

//u-->u t-->t
//remote is disconnect
//2byte header EEAA
//2byte 0106
//4byte data length
//8byte UID
static const uint8_t U_DISCONNECTED[16] = {
    0xEE,0xAA,0x01,0x06,0x00,0x00,0x00,0x08,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static const int16_t TYPE_U_DISCONNECTED = 0x0601;

//t-->u
//terminal info
//2byte header EEAA
//2byte 0107
//4byte data length
//8byte TID
//2byte screen width
//2byte screen height
//2byte camera width
//2byte camera height
//40byte name
static const uint8_t T_LOGIN[64] = {
    0xEE,0xAA,0x01,0x07,0x00,0x00,0x00,0x38,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static const int16_t TYPE_T_LOGIN = 0x0701;

//t-->u
//terminal info
//2byte header EEAA
//2byte 0108
//4byte data length
//8byte TID
//2byte screen width
//2byte screen height
//2byte camera width
//2byte camera height
//4byte type
//36byte name
static const uint8_t T_INFO[64] = {
    0xEE,0xAA,0x01,0x08,0x00,0x00,0x00,0x38,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static const int16_t TYPE_T_INFO = 0x0801;

//u-->t
//user info
//2byte header EEAA
//2byte 0109
//4byte data length
//32byte username
//24byte computer name
static const uint8_t U_LOGIN[64] = {
    0xEE,0xAA,0x01,0x09,0x00,0x00,0x00,0x38,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static const int16_t TYPE_U_LOGIN = 0x0901;

//t-->u
//terminal info
//2byte header EEAA
//2byte 010A
//4byte data length
//8byte TID
//2byte screen width
//2byte screen height
//2byte camera width
//2byte camera height
//4byte type
//36byte name
static const uint8_t U_INFO[64] = {
    0xEE,0xAA,0x01,0x0A,0x00,0x00,0x00,0x38,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static const int16_t TYPE_U_INFO = 0x1A01;

//-----------------SCREEN------------------
//u-->t
//start avc data
//2byte header EEAA
//2byte 0102
//4byte data length
//8byte TID
//8byte UID
//2byte dpi capture width, default is 640P
//1byte format 0-default h264 1 hevc
//1byte level 1-10 default 8
//1byte fps 1-100 default 24
static const uint8_t SCREEN_U_READY[32] = {
    0xEE,0xAA,0x02,0x01,0x00,0x00,0x00,0x18,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x02,0x80,0x00,0x08,0x18,0x00,0x00,0x00
};
static const int16_t TYPE_SCREEN_U_READY = 0x0102;

//t-->u
//screen encoder start
//2byte header EEAA
//2byte 0202
//4byte data length
//8byte TID
//2byte width
//2byte height
//2byte format default-h264,0x01-hevc
static const uint8_t SCREEN_T_START[24] = {
    0xEE,0xAA,0x02,0x02,0x00,0x00,0x00,0x10,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static const int16_t TYPE_SCREEN_T_START = 0x0202;

//u-->t
//start avc data
//2byte header EEAA
//2byte 0203
//4byte data length
//8byte TID
//8byte UID
static const uint8_t SCREEN_U_START[24] = {
    0xEE,0xAA,0x02,0x03,0x00,0x00,0x00,0x10,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static const int16_t TYPE_SCREEN_U_START = 0x0302;

//u-->t
//stop avc data
//2byte header EEAA
//2byte 0204
//4byte data length
//8byte TID
//8byte UID
static const uint8_t SCREEN_U_STOP[24] = {
    0xEE,0xAA,0x02,0x04,0x00,0x00,0x00,0x10,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static const int16_t TYPE_SCREEN_U_STOP = 0x0402;

//t-->u
//screen encoder stop
//2byte header EEAA
//2byte 0205
//4byte data length
//8byte TID
static const uint8_t SCREEN_T_STOP[16] = {
    0xEE,0xAA,0x02,0x05,0x00,0x00,0x00,0x08,
    0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static const int16_t TYPE_SCREEN_T_STOP = 0x0502;

//t-->u
//avc data
//2byte header EEAA
//2byte 0206
//4byte data length
//8byte TID
//8byte Time Stamp
static const uint8_t SCREEN_AVC[24] = {
    0xEE,0xAA,0x02,0x06,0x00,0x00,0x00,0x10,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static const int16_t TYPE_SCREEN_AVC = 0x0602;

//t-->t
//screen yuv data
//2byte header EEAA
//2byte 0207
//4byte data length
//8byte TID
//2byte width
//2byte height
//2byte format
//2byte num
static const uint8_t SCREEN_YUV[24] = {
    0xEE,0xAA,0x02,0x07,0x00,0x00,0x00,0x10,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static const int16_t TYPE_SCREEN_YUV = 0x0702;

//-----------------SOUND-------------------
//u-->t
//start sound data
//2byte header EEAA
//2byte 0211
//4byte data length
//8byte TID
//8byte UID
//2byte sample_rate
//2byte changle
//2byte format
static const uint8_t SNDOUT_U_READY[32] = {
    0xEE,0xAA,0x02,0x11,0x00,0x00,0x00,0x18,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static const int16_t TYPE_SNDOUT_U_READY = 0x1102;

//t-->u
//sound encoder start
//2byte header EEAA
//2byte 0212
//4byte data length
//8byte TID
//2byte sample_rate
//2byte changle
//2byte format
static const uint8_t SNDOUT_T_START[24] = {
    0xEE,0xAA,0x02,0x12,0x00,0x00,0x00,0x10,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static const int16_t TYPE_SNDOUT_T_START = 0x1202;

//u-->t
//start sound data
//2byte header EEAA
//2byte 0213
//4byte data length
//8byte TID
//8byte UID
static const uint8_t SNDOUT_U_START[24] = {
    0xEE,0xAA,0x02,0x13,0x00,0x00,0x00,0x10,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static const int16_t TYPE_SNDOUT_U_START = 0x1302;

//u-->t
//stop sound data
//2byte header EEAA
//2byte 0214
//4byte data length
//8byte TID
//8byte UID
static const uint8_t SNDOUT_U_STOP[24] = {
    0xEE,0xAA,0x02,0x14,0x00,0x00,0x00,0x10,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static const int16_t TYPE_SNDOUT_U_STOP = 0x1402;

//t-->u
//sound encoder stop
//2byte header EEAA
//2byte 0215
//4byte data length
//8byte TID
static const uint8_t SNDOUT_T_STOP[16] = {
    0xEE,0xAA,0x02,0x15,0x00,0x00,0x00,0x08,
    0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static const int16_t TYPE_SNDOUT_T_STOP = 0x1502;

//t-->u
//aac data
//2byte header EEAA
//2byte 0216
//4byte data length
//8byte TID
//8byte Time Stamp
static const uint8_t SNDOUT_AAC[24] = {
    0xEE,0xAA,0x02,0x16,0x00,0x00,0x00,0x10,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static const int16_t TYPE_SNDOUT_AAC = 0x1602;

//t-->t
//screen pcm data
//2byte  header EEAA
//2byte  0217
//4byte  data length
//8byte  TID
//2byte  sample
//2byte  channel
//2byte  format
//2byte  num
static const uint8_t SNDOUT_PCM[24] = {
    0xEE,0xAA,0x02,0x17,0x00,0x00,0x00,0x10,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static const int16_t TYPE_SNDOUT_PCM = 0x1702;

//-----------------CAMOUT------------------
//u-->t
//start recv camra data
//2byte header EEAA
//2byte 0221
//4byte data length
//8byte TID
//8byte UID
//2byte width
//2byte height
//1byte format 0-default h264 1 hevc
//1byte level 1-10 default 8
//1byte fps 1-100 default 24
static const uint8_t CAMOUT_U_READY[32] = {
    0xEE,0xAA,0x02,0x21,0x00,0x00,0x00,0x18,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x02,0xD0,0x05,0xA0,0x00,0x08,0x18,0x00
};
static const int16_t TYPE_CAMOUT_U_READY = 0x2102;

//u-->t
//stop recv camera data
//2byte header EEAA
//2byte 0222
//4byte data length
//8byte TID
//8byte UID
static const uint8_t CAMOUT_U_STOP[24] = {
    0xEE,0xAA,0x02,0x22,0x00,0x00,0x00,0x10,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static const int16_t TYPE_CAMOUT_U_STOP = 0x2202;

//t-->u
//start camra data
//2byte header EEAA
//2byte 0223
//4byte data length
//8byte TID
//2byte width
//2byte height
//4byte bitrate/kbits
static const uint8_t CAMOUT_T_START[24] = {
    0xEE,0xAA,0x02,0x23,0x00,0x00,0x00,0x10,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static const int16_t TYPE_CAMOUT_T_START = 0x2302;

//t-->u
//start camra data
//2byte header EEAA
//2byte 0224
//4byte data length
//8byte TID
//2byte width
//2byte height
//4byte bitrate/kbits
static const uint8_t CAMOUT_U_START[24] = {
    0xEE,0xAA,0x02,0x24,0x00,0x00,0x00,0x10,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static const int16_t TYPE_CAMOUT_U_START = 0x2402;

//t-->u
//stop camera data
//2byte header EEAA
//2byte 0225
//4byte data length
//8byte TID
//8byte UID
static const uint8_t CAMOUT_T_STOP[16] = {
    0xEE,0xAA,0x02,0x25,0x00,0x00,0x00,0x08,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static const int16_t TYPE_CAMOUT_T_STOP = 0x2502;

//t-->t
//camera yuv data
//2byte header EEAA
//2byte 0226
//4byte data length
//8byte TID
//2byte width
//2byte height
//2byte format
//2byte num
static const uint8_t CAMOUT_YUV[24] = {
    0xEE,0xAA,0x02,0x26,0x00,0x00,0x00,0x10,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static const int16_t TYPE_CAMOUT_YUV = 0x2602;

//t-->u
//camera encode data
//2byte header EEAA
//2byte 0227
//4byte data length
//8byte TID
//8byte Time Stamp
static const uint8_t CAMOUT_AVC[24] = {
    0xEE,0xAA,0x02,0x27,0x00,0x00,0x00,0x10,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static const int16_t TYPE_CAMOUT_AVC = 0x2702;

//-----------------MICOUT------------------
//u-->t
//start recv mic data
//2byte header EEAA
//2byte 0231
//4byte data length
//8byte TID
//8byte UID
//2byte sample
//2byte channel
//2byte format
static const uint8_t MICOUT_U_READY[32] = {
    0xEE,0xAA,0x02,0x31,0x00,0x00,0x00,0x18,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static const int16_t TYPE_MICOUT_U_READY = 0x3102;

//t-->u
//start mic data
//2byte header EEAA
//2byte 0232
//4byte data length
//8byte TID
//2byte width
//2byte height
//4byte bitrate/kbits
static const uint8_t MICOUT_U_START[24] = {
    0xEE,0xAA,0x02,0x32,0x00,0x00,0x00,0x10,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static const int16_t TYPE_MICOUT_U_START = 0x3202;

//u-->t
//stop recv mic data
//2byte header EEAA
//2byte 0233
//4byte data length
//8byte TID
//8byte UID
static const uint8_t MICOUT_U_STOP[24] = {
    0xEE,0xAA,0x02,0x33,0x00,0x00,0x00,0x10,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static const int16_t TYPE_MICOUT_U_STOP = 0x3302;

//t-->u
//mic start
//2byte header EEAA
//2byte 0234
//4byte data length
//8byte TID
//2byte sample
//2byte channel
//2byte format
static const uint8_t MICOUT_T_START[24] = {
    0xEE,0xAA,0x02,0x34,0x00,0x00,0x00,0x10,
    0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static const int16_t TYPE_MICOUT_T_START = 0x3402;

//t-->u
//mic stop
//2byte header EEAA
//2byte 0235
//4byte data length
//8byte TID
static const uint8_t MICOUT_T_STOP[16] = {
    0xEE,0xAA,0x02,0x35,0x00,0x00,0x00,0x08,
    0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static const int16_t TYPE_MICOUT_T_STOP = 0x3502;

//t-->t
//mic pcm data
//2byte  header EEAA
//2byte  0236
//4byte  data length
//8byte  TID
//2byte  sample
//2byte  channel
//2byte  format
//2byte  num
static const uint8_t MICOUT_PCM[24] = {
    0xEE,0xAA,0x02,0x36,0x00,0x00,0x00,0x10,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static const int16_t TYPE_MICOUT_PCM = 0x3602;

//t-->u
//mic aac data
//2byte header EEAA
//2byte 0237
//4byte data length
//8byte TID
//8byte Time Stamp
static const uint8_t MICOUT_AAC[24] = {
    0xEE,0xAA,0x02,0x37,0x00,0x00,0x00,0x10,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static const int16_t TYPE_MICOUT_AAC = 0x3702;

//-----------------CAMFIX------------------
//u-->t
//start recv camra fix data
//2byte header EEAA
//2byte 0241
//4byte data length
//8byte TID
//8byte UID
//2byte width
//2byte height
//1byte format 0-default h264 1 hevc
//1byte level 1-10 default 8
//1byte fps 1-100 default 24
static const uint8_t CAMFIX_U_READY[32] = {
    0xEE,0xAA,0x02,0x41,0x00,0x00,0x00,0x18,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x02,0xD0,0x05,0xA0,0x00,0x08,0x18,0x00
};
static const int16_t TYPE_CAMFIX_U_READY = 0x4102;

//u-->t
//stop recv camera data
//2byte header EEAA
//2byte 0242
//4byte data length
//8byte TID
//8byte UID
static const uint8_t CAMFIX_U_STOP[24] = {
    0xEE,0xAA,0x02,0x42,0x00,0x00,0x00,0x10,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static const int16_t TYPE_CAMFIX_U_STOP = 0x4202;

//t-->u
//start camra data
//2byte header EEAA
//2byte 0243
//4byte data length
//8byte TID
//2byte width
//2byte height
//4byte bitrate/kbits
static const uint8_t CAMFIX_T_START[24] = {
    0xEE,0xAA,0x02,0x43,0x00,0x00,0x00,0x10,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static const int16_t TYPE_CAMFIX_T_START = 0x4302;

//t-->u
//start camra data
//2byte header EEAA
//2byte 0244
//4byte data length
//8byte TID
//2byte width
//2byte height
//4byte bitrate/kbits
static const uint8_t CAMFIX_U_START[24] = {
    0xEE,0xAA,0x02,0x44,0x00,0x00,0x00,0x10,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static const int16_t TYPE_CAMFIX_U_START = 0x4402;

//t-->u
//stop camera data
//2byte header EEAA
//2byte 0245
//4byte data length
//8byte TID
//8byte UID
static const uint8_t CAMFIX_T_STOP[16] = {
    0xEE,0xAA,0x02,0x45,0x00,0x00,0x00,0x08,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static const int16_t TYPE_CAMFIX_T_STOP = 0x4502;

//u-->u
//filter yuv data
//2byte header EEAA
//2byte 0246
//4byte data length
//8byte UID
//2byte width
//2byte height
//2byte format
//2byte num
static const uint8_t CAMFIX_YUV[24] = {
    0xEE,0xAA,0x02,0x46,0x00,0x00,0x00,0x10,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static const int16_t TYPE_CAMFIX_YUV = 0x4602;

//u-->t
//filter encode data
//2byte header EEAA
//2byte 0247
//4byte data length
//8byte UID
//8byte Time Stamp
static const uint8_t CAMFIX_AVC[24] = {
    0xEE,0xAA,0x02,0x47,0x00,0x00,0x00,0x10,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static const int16_t TYPE_CAMFIX_AVC = 0x4702;


//-----------------MICFIX------------------
//u-->t
//start recv mic data
//2byte header EEAA
//2byte 0251
//4byte data length
//8byte TID
//8byte UID
//2byte sample
//2byte channel
//2byte format
static const uint8_t MICFIX_U_READY[32] = {
    0xEE,0xAA,0x02,0x51,0x00,0x00,0x00,0x18,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static const int16_t TYPE_MICFIX_U_READY = 0x5102;

//t-->u
//mic start
//2byte header EEAA
//2byte 0254
//4byte data length
//8byte TID
//2byte sample
//2byte channel
//2byte format
static const uint8_t MICFIX_T_START[24] = {
    0xEE,0xAA,0x02,0x54,0x00,0x00,0x00,0x10,
    0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static const int16_t TYPE_MICFIX_T_START = 0x5402;

//t-->u
//start mic data
//2byte header EEAA
//2byte 0252
//4byte data length
//8byte TID
//2byte width
//2byte height
//4byte bitrate/kbits
static const uint8_t MICFIX_U_START[24] = {
    0xEE,0xAA,0x02,0x52,0x00,0x00,0x00,0x10,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static const int16_t TYPE_MICFIX_U_START = 0x5202;

//u-->t
//stop recv mic data
//2byte header EEAA
//2byte 0253
//4byte data length
//8byte TID
//8byte UID
static const uint8_t MICFIX_U_STOP[24] = {
    0xEE,0xAA,0x02,0x53,0x00,0x00,0x00,0x10,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static const int16_t TYPE_MICFIX_U_STOP = 0x5302;

//t-->u
//mic stop
//2byte header EEAA
//2byte 0255
//4byte data length
//8byte TID
static const uint8_t MICFIX_T_STOP[16] = {
    0xEE,0xAA,0x02,0x55,0x00,0x00,0x00,0x08,
    0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static const int16_t TYPE_MICFIX_T_STOP = 0x5502;

//u-->u
//mic pcm data
//2byte  header EEAA
//2byte  0256
//4byte  data length
//8byte  TID
//8byte  UID
//2byte  sample
//2byte  channel
//2byte  format
//2byte  num
static const uint8_t MICFIX_PCM[32] = {
    0xEE,0xAA,0x02,0x56,0x00,0x00,0x00,0x18,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static const int16_t TYPE_MICFIX_PCM = 0x5602;

//u-->t
//mic fixed aac data
//2byte header EEAA
//2byte 0257
//4byte data length
//8byte TID
//8byte UID
//8byte Time Stamp
static const uint8_t MICFIX_AAC[24] = {
    0xEE,0xAA,0x02,0x57,0x00,0x00,0x00,0x10,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static const int16_t TYPE_MICFIX_AAC = 0x5702;

//-----------------INPUT------------------
// u-->t
//input touch
//2byte header EEAA
//2byte 0301
//4byte data length
//8byte TID
//1byte multi-touch sequence
//1byte down 0x00, move 0x01, up 0x02
//2byte x
//2byte y
//2byte width
//2byte heigh
//2byte screen width
//2byte screen height
//2byte screen orientation
static const uint8_t INPUT_TOUCH[32] = {
    0xEE,0xAA,0x03,0x01,0x00,0x00,0x00,0x18,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static const int16_t TYPE_INPUT_TOUCH = 0x0103;

//u-->t
//input key
//2byte header EEAA
//2byte 0302
//4byte data length
//8byte TID
//2byte down&up 0x00, down 0x01, up 0x02
//2byte key_vaule
static const uint8_t INPUT_KEY[24] = {
    0xEE,0xAA,0x03,0x02,0x00,0x00,0x00,0x10,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static const int16_t TYPE_INPUT_KEY = 0x0203;

//u-->t
//input text
//2byte header EEAA
//2byte 0303
//4byte data length
//8byte TID
static const uint8_t INPUT_TEXT[16] = {
    0xEE,0xAA,0x03,0x03,0x00,0x00,0x00,0x08,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static const int16_t TYPE_INPUT_TEXT = 0x0303;

//-----------------OTHER------------------
//t-->t
//open camera
//2byte header EEAA
//2byte 0401
//4byte data length
//8byte TID
//2byte width
//2byte height
//4byte bitrate/kbits
static const uint8_t CAMERA_OPEN[24] = {
    0xEE,0xAA,0x04,0x01,0x00,0x00,0x00,0x10,
    0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static const int16_t TYPE_CAMERA_OPEN = 0x0104;

//t-->t
//close camera
//2byte header EEAA
//2byte 0402
//4byte data length
//8byte TID
static const uint8_t CAMERA_CLOSE[16] = {
    0xEE,0xAA,0x04,0x02,0x00,0x00,0x00,0x08,
    0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static const int16_t TYPE_CAMERA_CLOSE = 0x0204;

//u-->t
//restart mctl
//2byte header EEAA
//2byte 0403
//4byte data length
//8byte TID
static const uint8_t MCTL_RESTART[16] = {
    0xEE,0xAA,0x04,0x03,0x00,0x00,0x00,0x08,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static const int16_t TYPE_MCTL_RESTART = 0x0304;


//t-->t
//send imei
//2byte header EEAA
//2byte 0404
//4byte data length
//8byte TID
//....
static const uint8_t IMEI_NOTIFY[] = {
    0xEE,0xAA,0x04,0x04,0x00,0x00,0x00,0x08,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static const int16_t TYPE_IMEI_NOTIFY = 0x0404;

//t-->t
//get imei
//2byte header EEAA
//2byte 0404
//4byte data length
//8byte TID
//....
static const uint8_t IMEI_FIND[] = {
    0xEE,0xAA,0x04,0x05,0x00,0x00,0x00,0x08,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static const int16_t TYPE_IMEI_FIND = 0x0504;

#endif //F_ZEBRA_PROTOCOL_H
