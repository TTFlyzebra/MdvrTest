plugins {
    id 'com.android.application'
}

static def getCreateTime() {
    def createTime = new Date().format("yyyyMMddHHmm", TimeZone.getTimeZone("GMT+08:00")).trim()
    return createTime
}

static def getGitSHA() {
    def gitSHA = 'git rev-parse --short HEAD'.execute().text.trim()
    return gitSHA
}

static def getGitCommitCount() {
    def gitCommitCount = 'git rev-list --count HEAD'.execute().text.trim();
    return gitCommitCount;
}

android {
    namespace 'com.flyzebra.mdvr'
    compileSdk rootProject.ext.compileSdk

    defaultConfig {
        applicationId "com.flyzebra.mdvr"
        minSdk rootProject.ext.minSdk
        targetSdk rootProject.ext.targetSdk
        versionCode gitCommitCount.toInteger()
        versionName "v1.0." + gitSHA + "." + createTime
        flavorDimensions "versionCode"
    }

    signingConfigs {
        aospKey {
            storeFile file("../signkey/platform.jks")
            storePassword "123456"
            keyAlias "quectel"
            keyPassword "123456"
        }
        flyzebraKey {
            storeFile file("../signkey/flyzebra.jks")
            storePassword "123456"
            keyAlias "flyzebra"
            keyPassword "123456"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            signingConfig null
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            minifyEnabled false
            signingConfig null
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    sourceSets {
        AndroidP_aosp {
            jniLibs.srcDirs = ['libs/androidp']
        }
        AndroidP_flyzebra {
            jniLibs.srcDirs = ['libs/androidp']
        }
        AndroidQ_aosp {
            jniLibs.srcDirs = ['libs/androidq']
        }
        AndroidQ_flyzebra {
            jniLibs.srcDirs = ['libs/androidq']
        }
    }

    productFlavors {
        AndroidP_aosp {
            versionName "1.0"
            signingConfig signingConfigs.aospKey
            ndk {
                abiFilters "arm64-v8a"
            }
        }

        AndroidP_flyzebra {
            versionName "1.0"
            signingConfig signingConfigs.flyzebraKey
            ndk {
                abiFilters "arm64-v8a"
            }
        }

        AndroidQ_aosp {
            versionName "1.0"
            signingConfig signingConfigs.aospKey
            ndk {
                abiFilters "arm64-v8a"
            }
        }

        AndroidQ_flyzebra {
            versionName "1.0"
            signingConfig signingConfigs.flyzebraKey
            ndk {
                abiFilters "arm64-v8a"
            }
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            def fileName
            if (variant.buildType.name.equals('release')) {
                fileName = "${applicationId}_release_${versionName}_${gitCommitCount}.apk"
            } else if (variant.buildType.name.equals('debug')) {
                fileName = "${applicationId}_debug_${versionName}_${gitCommitCount}.apk"
            }
            outputFileName = fileName;
        }
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    implementation files('libs/gson-2.7.jar')
    implementation files('libs/qcar_encoder.aar')
    implementation files('libs/libarcsoft_visdrive_engine.aar')
    implementation project(path: ':libutils')
    implementation project(path: ':libzebra')
    implementation project(path: ':librtmp')
    implementation project(path: ':libarcsoft')
    implementation project(path: ':libyuv')
}